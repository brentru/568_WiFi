#include "Messages.h"
#include <string.h>
#include "PmodWIFI.h"

bool CreateConnReqMsg(Message* msg, uint8_t nodeId)
{
    msg = new Message();
    msg->header.sourceId = nodeId;
    msg->header.msgType = (uint8_t)CONNECTION_REQ;
    return true;
}

bool CreateSysHealthMsg(Message* msg, uint8_t* payload, uint8_t nodeId)
{
    msg = new Message();
    msg->header.sourceId = nodeId;
    msg->header.msgType = (uint8_t)SYS_HEALTH;
    memcpy(msg->payload, payload, PAYLOAD_SIZE);
    return true;
}

bool CreateSensorRegMsg(Message* msg, uint8_t* payload, uint8_t nodeId)
{
	msg = new Message();
    msg->header.sourceId = nodeId;
    msg->header.msgType = (uint8_t)SENSOR_REG;
    memcpy(msg->payload, payload, PAYLOAD_SIZE);
	return true;
}

void PrintMsgType(MsgTypes msgType)
{
	switch(msgType)
	{
	    case CONNECTION_REQ:
	    	xil_printf("CONNECTION_REQ");
	    	break;
	    case SYS_HEALTH:
	    	xil_printf("SYS_HEALTH");
	    	break;
	    case EMERGENCY_REPORT:
	    	xil_printf("EMERGENCY_REPORT");
	    	break;
	    case EMERGENCY_BROADCAST:
	    	xil_printf("EMERGENCY_BROADCAST");
	    	break;
	    case SENSOR_REG:
	    	xil_printf("SENSOR_REG");
	    	break;
	    case REG_ACK:
	    	xil_printf("REG_ACK");
	    	break;
	    case SENSOR_DATA_PUB:
	    	xil_printf("SENSOR_DATA_PUB");
	    	break;
	    case SENSOR_SUB:
	    	xil_printf("SENSOR_SUB");
	    	break;
	    case SENSOR_DATA_FORW:
	    	xil_printf("SENSOR_DATA_FORW");
	    	break;
	    case SENSOR_SAMPLE_REQ:
	    	xil_printf("SENSOR_SAMPLE_REQ");
	    	break;
	    case SENSOR_UNSUB:
	    	xil_printf("SENSOR_UNSUB");
	    	break;
	    case SENSOR_SUB_INV:
	    	xil_printf("SENSOR_SUB_INV");
	    	break;
	    case UNSUB_ACK:
	    	xil_printf("UNSUB_ACK");
	    	break;
	    default:
	    	break;
	}
}

void PrintSensorNodeId(SensorNodeIds id)
{
	switch(id)
	{
	    case LIGHTING:
	    	xil_printf("LIGHTING");
	    	break;
	    case CLIMATE:
	    	xil_printf("CLIMATE");
	    	break;
	    case POWER:
	    	xil_printf("POWER");
	    	break;
	    case PLANTS:
	    	xil_printf("PLANTS");
	    	break;
	    case HUB:
	    	xil_printf("DATAHUB");
	    	break;
	    default:
	    	break;
	}
}
